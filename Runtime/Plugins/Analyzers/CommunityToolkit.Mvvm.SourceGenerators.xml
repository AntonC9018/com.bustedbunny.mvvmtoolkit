<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommunityToolkit.Mvvm.SourceGenerators</name>
    </assembly>
    <members>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator">
            <summary>
            A source generator for the <c>INotifyPropertyChangedAttribute</c> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator"/> class.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator.ValidateTargetTypeAndGetInfo(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.INotifyPropertyChangedGenerator.FilterDeclaredMembers(CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.INotifyPropertyChangedInfo,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo">
            <summary>
            A model representing an attribute declaration.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo.#ctor(System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo},CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.ValueTuple{System.String,CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo}})">
            <summary>
            A model representing an attribute declaration.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo.From(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo"/> instance from a given <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> value.
            </summary>
            <param name="attributeData">The input <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> value.</param>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo"/> instance representing <paramref name="attributeData"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo.From(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.SemanticModel,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax},System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo"/> instance from a given syntax node.
            </summary>
            <param name="typeSymbol">The symbol for the attribute type.</param>
            <param name="semanticModel">The <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> instance for the current run.</param>
            <param name="arguments">The sequence of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeArgumentSyntax"/> instances to process.</param>
            <param name="token">The cancellation token for the current operation.</param>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo"/> instance representing the input attribute data.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo.GetSyntax">
            <summary>
            Gets an <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.AttributeSyntax"/> instance representing the current value.
            </summary>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> instance representing the current value.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.INotifyPropertyChangedInfo">
            <summary>
            A model with gathered info on a given <c>INotifyPropertyChangedAttribute</c> instance.
            </summary>
            <param name="IncludeAdditionalHelperMethods">Whether to also generate helper methods in the target type.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.INotifyPropertyChangedInfo.#ctor(System.Boolean)">
            <summary>
            A model with gathered info on a given <c>INotifyPropertyChangedAttribute</c> instance.
            </summary>
            <param name="IncludeAdditionalHelperMethods">Whether to also generate helper methods in the target type.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.INotifyPropertyChangedInfo.IncludeAdditionalHelperMethods">
            <summary>Whether to also generate helper methods in the target type.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo">
            <summary>
            A model with gathered info on a given <c>ObservableRecipientAttribute</c> instance.
            </summary>
            <param name="TypeName">The type name of the type being annotated.</param>
            <param name="HasExplicitConstructors">Whether or not the target type has explicit constructors.</param>
            <param name="IsAbstract">Whether or not the target type is abstract.</param>
            <param name="IsObservableValidator">Whether or not the target type inherits from <c>ObservableValidator</c>.</param>
            <param name="IsRequiresUnreferencedCodeAttributeAvailable">Whether or not the <c>RequiresUnreferencedCodeAttribute</c> type is available.</param>
            <param name="HasOnActivatedMethod">Whether the target type has a custom <c>OnActivated()</c> method.</param>
            <param name="HasOnDeactivatedMethod">Whether the target type has a custom <c>OnDeactivated()</c> method.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A model with gathered info on a given <c>ObservableRecipientAttribute</c> instance.
            </summary>
            <param name="TypeName">The type name of the type being annotated.</param>
            <param name="HasExplicitConstructors">Whether or not the target type has explicit constructors.</param>
            <param name="IsAbstract">Whether or not the target type is abstract.</param>
            <param name="IsObservableValidator">Whether or not the target type inherits from <c>ObservableValidator</c>.</param>
            <param name="IsRequiresUnreferencedCodeAttributeAvailable">Whether or not the <c>RequiresUnreferencedCodeAttribute</c> type is available.</param>
            <param name="HasOnActivatedMethod">Whether the target type has a custom <c>OnActivated()</c> method.</param>
            <param name="HasOnDeactivatedMethod">Whether the target type has a custom <c>OnDeactivated()</c> method.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.TypeName">
            <summary>The type name of the type being annotated.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.HasExplicitConstructors">
            <summary>Whether or not the target type has explicit constructors.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.IsAbstract">
            <summary>Whether or not the target type is abstract.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.IsObservableValidator">
            <summary>Whether or not the target type inherits from <c>ObservableValidator</c>.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.IsRequiresUnreferencedCodeAttributeAvailable">
            <summary>Whether or not the <c>RequiresUnreferencedCodeAttribute</c> type is available.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.HasOnActivatedMethod">
            <summary>Whether the target type has a custom <c>OnActivated()</c> method.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo.HasOnDeactivatedMethod">
            <summary>Whether the target type has a custom <c>OnDeactivated()</c> method.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo">
            <summary>
            A model representing an generated property
            </summary>
            <param name="TypeNameWithNullabilityAnnotations">The type name for the generated property, including nullability annotations.</param>
            <param name="FieldName">The field name.</param>
            <param name="PropertyName">The generated property name.</param>
            <param name="PropertyChangingNames">The sequence of property changing properties to notify.</param>
            <param name="PropertyChangedNames">The sequence of property changed properties to notify.</param>
            <param name="NotifiedCommandNames">The sequence of commands to notify.</param>
            <param name="NotifyPropertyChangedRecipients">Whether or not the generated property also broadcasts changes.</param>
            <param name="NotifyDataErrorInfo">Whether or not the generated property also validates its value.</param>
            <param name="IsOldPropertyValueDirectlyReferenced">Whether the old property value is being directly referenced.</param>
            <param name="IsReferenceType">Indicates whether the property is of a reference type.</param>
            <param name="ForwardedAttributes">The sequence of forwarded attributes for the generated property.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.#ctor(System.String,System.String,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String},CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String},CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.AttributeInfo})">
            <summary>
            A model representing an generated property
            </summary>
            <param name="TypeNameWithNullabilityAnnotations">The type name for the generated property, including nullability annotations.</param>
            <param name="FieldName">The field name.</param>
            <param name="PropertyName">The generated property name.</param>
            <param name="PropertyChangingNames">The sequence of property changing properties to notify.</param>
            <param name="PropertyChangedNames">The sequence of property changed properties to notify.</param>
            <param name="NotifiedCommandNames">The sequence of commands to notify.</param>
            <param name="NotifyPropertyChangedRecipients">Whether or not the generated property also broadcasts changes.</param>
            <param name="NotifyDataErrorInfo">Whether or not the generated property also validates its value.</param>
            <param name="IsOldPropertyValueDirectlyReferenced">Whether the old property value is being directly referenced.</param>
            <param name="IsReferenceType">Indicates whether the property is of a reference type.</param>
            <param name="ForwardedAttributes">The sequence of forwarded attributes for the generated property.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.TypeNameWithNullabilityAnnotations">
            <summary>The type name for the generated property, including nullability annotations.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.FieldName">
            <summary>The field name.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.PropertyName">
            <summary>The generated property name.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.PropertyChangingNames">
            <summary>The sequence of property changing properties to notify.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.PropertyChangedNames">
            <summary>The sequence of property changed properties to notify.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.NotifiedCommandNames">
            <summary>The sequence of commands to notify.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.NotifyPropertyChangedRecipients">
            <summary>Whether or not the generated property also broadcasts changes.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.NotifyDataErrorInfo">
            <summary>Whether or not the generated property also validates its value.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.IsOldPropertyValueDirectlyReferenced">
            <summary>Whether the old property value is being directly referenced.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.IsReferenceType">
            <summary>Indicates whether the property is of a reference type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo.ForwardedAttributes">
            <summary>The sequence of forwarded attributes for the generated property.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo">
            <summary>
            A model representing a typed constant item.
            </summary>
            <remarks>This model is fully serializable and comparable.</remarks>
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.GetSyntax">
            <summary>
            Gets an <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> instance representing the current constant.
            </summary>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> instance representing the current constant.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Array">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing an array.
            </summary>
            <param name="ElementTypeName">The type name for array elements.</param>
            <param name="Items">The sequence of contained elements.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Array.#ctor(System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo})">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing an array.
            </summary>
            <param name="ElementTypeName">The type name for array elements.</param>
            <param name="Items">The sequence of contained elements.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Array.ElementTypeName">
            <summary>The type name for array elements.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Array.Items">
            <summary>The sequence of contained elements.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Array.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a primitive value.
            </summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.String">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a <see cref="T:System.String"/> value.
            </summary>
            <param name="Value">The input <see cref="T:System.String"/> value.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.String.#ctor(System.String)">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a <see cref="T:System.String"/> value.
            </summary>
            <param name="Value">The input <see cref="T:System.String"/> value.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.String.Value">
            <summary>The input <see cref="T:System.String"/> value.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.String.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Boolean">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="Value">The input <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Boolean.#ctor(System.Boolean)">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="Value">The input <see cref="T:System.Boolean"/> value.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Boolean.Value">
            <summary>The input <see cref="T:System.Boolean"/> value.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Boolean.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Of`1">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a generic primitive value.
            </summary>
            <typeparam name="T">The primitive type.</typeparam>
            <param name="Value">The input primitive value.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Of`1.#ctor(`0)">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a generic primitive value.
            </summary>
            <typeparam name="T">The primitive type.</typeparam>
            <param name="Value">The input primitive value.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Of`1.Value">
            <summary>The input primitive value.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Primitive.Of`1.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Type">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a type.
            </summary>
            <param name="TypeName">The input type name.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Type.#ctor(System.String)">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a type.
            </summary>
            <param name="TypeName">The input type name.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Type.TypeName">
            <summary>The input type name.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Type.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Enum">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing an enum value.
            </summary>
            <param name="TypeName">The enum type name.</param>
            <param name="Value">The boxed enum value.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Enum.#ctor(System.String,System.Object)">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing an enum value.
            </summary>
            <param name="TypeName">The enum type name.</param>
            <param name="Value">The boxed enum value.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Enum.TypeName">
            <summary>The enum type name.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Enum.Value">
            <summary>The boxed enum value.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Enum.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Null">
            <summary>
            A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> type representing a <see langword="null"/> value.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.Null.GetSyntax">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.From(Microsoft.CodeAnalysis.TypedConstant)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> instance from a given <see cref="T:Microsoft.CodeAnalysis.TypedConstant"/> value.
            </summary>
            <param name="arg">The input <see cref="T:Microsoft.CodeAnalysis.TypedConstant"/> value.</param>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> instance representing <paramref name="arg"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input argument is not valid.</exception>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo.From(Microsoft.CodeAnalysis.IOperation,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax,System.Threading.CancellationToken)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> instance from a given <see cref="T:Microsoft.CodeAnalysis.IOperation"/> value.
            </summary>
            <param name="operation">The input <see cref="T:Microsoft.CodeAnalysis.IOperation"/> value.</param>
            <param name="semanticModel">The <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> that was used to retrieve <paramref name="operation"/>.</param>
            <param name="expression">The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ExpressionSyntax"/> that <paramref name="operation"/> was retrieved from.</param>
            <param name="token">The cancellation token for the current operation.</param>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.TypedConstantInfo"/> instance representing <paramref name="operation"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input argument is not valid.</exception>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo">
            <summary>
            A model with gathered info on all validatable properties in a given type.
            </summary>
            <param name="FilenameHint">The filename hint for the current type.</param>
            <param name="TypeName">The fully qualified type name of the target type.</param>
            <param name="PropertyNames">The name of validatable properties.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo.#ctor(System.String,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String})">
            <summary>
            A model with gathered info on all validatable properties in a given type.
            </summary>
            <param name="FilenameHint">The filename hint for the current type.</param>
            <param name="TypeName">The fully qualified type name of the target type.</param>
            <param name="PropertyNames">The name of validatable properties.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo.FilenameHint">
            <summary>The filename hint for the current type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo.TypeName">
            <summary>The fully qualified type name of the target type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo.PropertyNames">
            <summary>The name of validatable properties.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableObjectGenerator">
            <summary>
            A source generator for the <c>ObservableObjectAttribute</c> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableObjectGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableObjectGenerator"/> class.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableObjectGenerator.ValidateTargetTypeAndGetInfo(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableObjectGenerator.FilterDeclaredMembers(System.Int32,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator">
            <summary>
            A source generator for the <c>ObservablePropertyAttribute</c> type.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute">
            <summary>
            A container for all the logic for <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGetInfo(Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax,Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.SemanticModel,System.Threading.CancellationToken,CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo@,System.Collections.Immutable.ImmutableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <summary>
            Processes a given field.
            </summary>
            <param name="fieldSyntax">The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax"/> instance to process.</param>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="semanticModel">The <see cref="T:Microsoft.CodeAnalysis.SemanticModel"/> instance for the current run.</param>
            <param name="token">The cancellation token for the current operation.</param>
            <param name="propertyInfo">The resulting <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo"/> value, if successfully retrieved.</param>
            <param name="diagnostics">The resulting diagnostics from the processing operation.</param>
            <returns>The resulting <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo"/> instance for <paramref name="fieldSymbol"/>, if successful.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.IsTargetTypeValid(Microsoft.CodeAnalysis.IFieldSymbol,System.Boolean@)">
            <summary>
            Validates the containing type for a given field being annotated.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="shouldInvokeOnPropertyChanging">Whether or not property changing events should also be raised.</param>
            <returns>Whether or not the containing type for <paramref name="fieldSymbol"/> is valid.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.IsGeneratedPropertyInvalid(System.String,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks whether the generated property would be a special case that is marked as invalid.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="propertyType">The property type.</param>
            <returns>Whether the generated property is invalid.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGatherDependentPropertyChangedNames(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.AttributeData,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{System.String}@,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <summary>
            Tries to gather dependent properties from the given attribute.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance for <paramref name="fieldSymbol"/>.</param>
            <param name="propertyChangedNames">The target collection of dependent property names to populate.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <returns>Whether or not <paramref name="attributeData"/> was an attribute containing any dependent properties.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGatherDependentCommandNames(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.AttributeData,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{System.String}@,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <summary>
            Tries to gather dependent commands from the given attribute.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance for <paramref name="fieldSymbol"/>.</param>
            <param name="notifiedCommandNames">The target collection of dependent command names to populate.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <returns>Whether or not <paramref name="attributeData"/> was an attribute containing any dependent commands.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGetIsNotifyingRecipients(Microsoft.CodeAnalysis.IFieldSymbol,System.Boolean@)">
            <summary>
            Checks whether a given generated property should also notify recipients.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="isBroadcastTargetValid">Whether or not the the property is in a valid target that can notify recipients.</param>
            <returns>Whether or not the generated property for <paramref name="fieldSymbol"/> is in a type annotated with <c>[NotifyPropertyChangedRecipients]</c>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGetIsNotifyingRecipients(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.AttributeData,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.Boolean,System.Boolean@)">
            <summary>
            Checks whether a given generated property should also notify recipients.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance for <paramref name="fieldSymbol"/>.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="hasOrInheritsClassLevelNotifyPropertyChangedRecipients">Indicates wether the containing type of <paramref name="fieldSymbol"/> has or inherits <c>[NotifyPropertyChangedRecipients]</c>.</param>
            <param name="isBroadcastTargetValid">Whether or not the the property is in a valid target that can notify recipients.</param>
            <returns>Whether or not the generated property for <paramref name="fieldSymbol"/> used <c>[NotifyPropertyChangedRecipients]</c>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGetNotifyDataErrorInfo(Microsoft.CodeAnalysis.IFieldSymbol,System.Boolean@)">
            <summary>
            Checks whether a given generated property should also validate its value.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="isValidationTargetValid">Whether or not the the property is in a valid target that can validate values.</param>
            <returns>Whether or not the generated property for <paramref name="fieldSymbol"/> used <c>[NotifyDataErrorInfo]</c>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.TryGetNotifyDataErrorInfo(Microsoft.CodeAnalysis.IFieldSymbol,Microsoft.CodeAnalysis.AttributeData,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.Boolean,System.Boolean@)">
            <summary>
            Checks whether a given generated property should also validate its value.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance for <paramref name="fieldSymbol"/>.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="hasOrInheritsClassLevelNotifyDataErrorInfo">Indicates wether the containing type of <paramref name="fieldSymbol"/> has or inherits <c>[NotifyDataErrorInfo]</c>.</param>
            <param name="isValidationTargetValid">Whether or not the the property is in a valid target that can validate values.</param>
            <returns>Whether or not the generated property for <paramref name="fieldSymbol"/> used <c>[NotifyDataErrorInfo]</c>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.IsOldPropertyValueDirectlyReferenced(Microsoft.CodeAnalysis.IFieldSymbol,System.String)">
            <summary>
            Checks whether the generated code has to directly reference the old property value.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <param name="propertyName">The name of the property being generated.</param>
            <returns>Whether the generated code needs direct access to the old property value.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.GetKnownPropertyChangingArgsSyntax(System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the cached args for property changing notifications.
            </summary>
            <param name="names">The sequence of property names to cache args for.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the sequence of cached args, if any.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.GetKnownPropertyChangedArgsSyntax(System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the cached args for property changed notifications.
            </summary>
            <param name="names">The sequence of property names to cache args for.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the sequence of cached args, if any.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.GetPropertySyntax(CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instance for the input field.
            </summary>
            <param name="propertyInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo"/> instance to process.</param>
            <returns>The generated <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instance for <paramref name="propertyInfo"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.GetOnPropertyChangeMethodsSyntax(CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instances for the <c>OnPropertyChanging</c> and <c>OnPropertyChanged</c> methods for the input field.
            </summary>
            <param name="propertyInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.PropertyInfo"/> instance to process.</param>
            <returns>The generated <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instances for the <c>OnPropertyChanging</c> and <c>OnPropertyChanged</c> methods.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.GetKnownPropertyChangingOrChangedArgsSyntax(System.String,System.String,System.Collections.Immutable.ImmutableArray{System.String})">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the cached args of a specified type.
            </summary>
            <param name="ContainingTypeName">The name of the generated type.</param>
            <param name="ArgsTypeName">The argument type name.</param>
            <param name="names">The sequence of property names to cache args for.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the sequence of cached args, if any.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.CreateFieldDeclaration(System.String,System.String)">
            <summary>
            Creates a field declaration for a cached property changing/changed name.
            </summary>
            <param name="typeName">The field type name (either <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> or <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/>).</param>
            <param name="propertyName">The name of the cached property name.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.FieldDeclarationSyntax"/> instance for the input cached property name.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyGenerator.Execute.GetGeneratedPropertyName(Microsoft.CodeAnalysis.IFieldSymbol)">
            <summary>
            Get the generated property name for an input field.
            </summary>
            <param name="fieldSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IFieldSymbol"/> instance to process.</param>
            <returns>The generated property name for <paramref name="fieldSymbol"/>.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableRecipientGenerator">
            <summary>
            A source generator for the <c>ObservableRecipientAttribute</c> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableRecipientGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableRecipientGenerator"/> class.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableRecipientGenerator.ValidateTargetTypeAndGetInfo(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableRecipientGenerator.FilterDeclaredMembers(CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ObservableRecipientInfo,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator">
            <summary>
            A source generator for message registration without relying on compiled LINQ expressions.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Execute">
            <summary>
            A container for all the logic for <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Execute.IsObservableValidator(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Checks whether a given type inherits from <c>ObservableValidator</c>.
            </summary>
            <param name="typeSymbol">The input <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance to check.</param>
            <returns>Whether <paramref name="typeSymbol"/> inherits from <c>ObservableValidator</c>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Execute.GetInfo(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo"/> instance from an input symbol.
            </summary>
            <param name="typeSymbol">The input <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance to inspect.</param>
            <returns>The resulting <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo"/> instance for <paramref name="typeSymbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Execute.GetSyntax(System.Boolean)">
            <summary>
            Gets the head <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance.
            </summary>
            <param name="isDynamicallyAccessedMembersAttributeAvailable">Indicates whether <c>[DynamicallyAccessedMembers]</c> should be generated.</param>
            <returns>The head <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the type attributes.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Execute.GetSyntax(CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance for the input recipient.
            </summary>
            <param name="validationInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo"/> instance to process.</param>
            <returns>The generated <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance for <paramref name="validationInfo"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservableValidatorValidateAllPropertiesGenerator.Execute.EnumerateValidationStatements(CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo)">
            <summary>
            Gets a sequence of statements to validate declared properties.
            </summary>
            <param name="validationInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.ComponentModel.Models.ValidationInfo"/> instance to process.</param>
            <returns>The sequence of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax"/> instances to validate declared properties.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1">
            <summary>
            A source generator for a given attribute type.
            </summary>
            <typeparam name="TInfo">The type of info gathered for each target type to process.</typeparam>
            <inheritdoc/>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.fullyQualifiedAttributeMetadataName">
            <summary>
            The fully qualified metadata name of the attribute type to look for.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.classDeclaration">
            <summary>
            The preloaded <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> instance with members to generate.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.sealedMemberDeclarations">
            <summary>
            The sequence of member declarations for sealed types.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.nonSealedMemberDeclarations">
            <summary>
            The resulting sequence of member declarations for non sealed types.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1"/> class.
            </summary>
            <param name="fullyQualifiedAttributeMetadataName">The fully qualified metadata name of the attribute type to look for.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.ValidateTargetTypeAndGetInfo(Microsoft.CodeAnalysis.INamedTypeSymbol,Microsoft.CodeAnalysis.AttributeData,Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <summary>
            Validates the target type being processes, gets the info if possible and produces all necessary diagnostics.
            </summary>
            <param name="typeSymbol">The <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance currently being processed.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance for the attribute used over <paramref name="typeSymbol"/>.</param>
            <param name="compilation">The compilation that <paramref name="typeSymbol"/> belongs to.</param>
            <param name="diagnostics">The resulting diagnostics, if any.</param>
            <returns>The extracted info for the current type, if possible.</returns>
            <remarks>If <paramref name="diagnostics"/> is empty, the returned info will always be ignored and no sources will be produced.</remarks>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.FilterDeclaredMembers(`0,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax})">
            <summary>
            Filters the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> nodes to generate from the input parsed tree.
            </summary>
            <param name="info">The <typeparamref name="TInfo"/> instance with the current processing info.</param>
            <param name="memberDeclarations">The input sequence of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instances to generate.</param>
            <returns>A sequence of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> nodes to emit in the generated file.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.MetadataInfo">
            <summary>
            A small record for metadata info on types to generate.
            </summary>
            <param name="IsSealed">Whether the target type is sealed.</param>
            <param name="IsNullabilitySupported">Whether nullability attributes are supported.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.MetadataInfo.#ctor(System.Boolean,System.Boolean)">
            <summary>
            A small record for metadata info on types to generate.
            </summary>
            <param name="IsSealed">Whether the target type is sealed.</param>
            <param name="IsNullabilitySupported">Whether nullability attributes are supported.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.MetadataInfo.IsSealed">
            <summary>Whether the target type is sealed.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.MetadataInfo.IsNullabilitySupported">
            <summary>Whether nullability attributes are supported.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute">
            <summary>
            A container for all the logic for <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute.IsNullabilitySupported(Microsoft.CodeAnalysis.Compilation)">
            <summary>
            Checks whether or not nullability attributes are currently available.
            </summary>
            <param name="compilation">The input <see cref="T:Microsoft.CodeAnalysis.Compilation"/> instance.</param>
            <returns>Whether or not nullability attributes are currently available.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute.LoadClassDeclaration(System.String)">
            <summary>
            Loads the source <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> instance to get member declarations from.
            </summary>
            <param name="attributeType">The fully qualified name of the attribute type to look for.</param>
            <returns>The source <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax"/> instance to get member declarations from.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute.ProcessMemberDeclarations(System.Type,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}@,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax}@)">
            <summary>
            Processes the sequence of member declarations to generate.
            </summary>
            <param name="generatorType">The type of generator being used.</param>
            <param name="memberDeclarations">The input sequence of member declarations to generate.</param>
            <param name="sealedMemberDeclarations">The resulting sequence of member declarations for sealed types.</param>
            <param name="nonSealedMemberDeclarations">The resulting sequence of member declarations for non sealed types.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute.AdjustMemberDeclarationNullabilityAnnotations(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},System.Boolean)">
            <summary>
            Adjusts the nullability annotations for generated members, dropping attributes if needed.
            </summary>
            <param name="memberDeclarations">The input sequence of member declarations to generate.</param>
            <param name="isNullabilitySupported">Whether nullability attributes are supported.</param>
            <returns>The updated collection of member declarations to generate.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute.NullabilityAdjustmentSyntaxRewriter">
            <summary>
            A custom syntax rewriter that removes nullability attributes from method parameters.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.TransitiveMembersGenerator`1.Execute.NullabilityAdjustmentSyntaxRewriter.VisitParameter(Microsoft.CodeAnalysis.CSharp.Syntax.ParameterSyntax)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.InvalidClassLevelNotifyDataErrorInfoAttributeAnalyzer">
            <summary>
            A diagnostic analyzer that generates an error when a class level <c>[NotifyDataErrorInfo]</c> use is detected.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.InvalidClassLevelNotifyDataErrorInfoAttributeAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.InvalidClassLevelNotifyDataErrorInfoAttributeAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.InvalidClassLevelNotifyPropertyChangedRecipientsAttributeAnalyzer">
            <summary>
            A diagnostic analyzer that generates an error when a class level <c>[NotifyPropertyChangedRecipients]</c> use is detected.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.InvalidClassLevelNotifyPropertyChangedRecipientsAttributeAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.InvalidClassLevelNotifyPropertyChangedRecipientsAttributeAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer">
            <summary>
            A diagnostic analyzer that generates a warning when a class is using a code generation attribute when it could inherit instead.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer.TypeNameKey">
            <summary>
            The key for the name of the target type to update.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer.AttributeTypeNameKey">
            <summary>
            The key for the name of the attribute that was found and should be removed.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer.GeneratorAttributeNamesToFullyQualifiedNamesMap">
            <summary>
            The mapping of target attributes that will trigger the analyzer.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer.GeneratorAttributeNamesToDiagnosticsMap">
            <summary>
            The mapping of diagnostics for each target attribute.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ClassUsingAttributeInsteadOfInheritanceAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.FieldWithOrphanedDependentObservablePropertyAttributesAnalyzer">
            <summary>
            A diagnostic analyzer that generates an error whenever a field has an orphaned attribute that depends on <c>[ObservableProperty]</c>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.FieldWithOrphanedDependentObservablePropertyAttributesAnalyzer.GeneratorAttributeNamesToFullyQualifiedNamesMap">
            <summary>
            The mapping of target attributes that will trigger the analyzer.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.FieldWithOrphanedDependentObservablePropertyAttributesAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.FieldWithOrphanedDependentObservablePropertyAttributesAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.FieldReferenceForObservablePropertyFieldAnalyzer">
            <summary>
            A diagnostic analyzer that generates a warning when accessing a field instead of a generated observable property.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.FieldReferenceForObservablePropertyFieldAnalyzer.FieldNameKey">
            <summary>
            The key for the name of the target field to update.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.FieldReferenceForObservablePropertyFieldAnalyzer.PropertyNameKey">
            <summary>
            The key for the name of the generated property to update a field reference to.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.FieldReferenceForObservablePropertyFieldAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.FieldReferenceForObservablePropertyFieldAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.UnsupportedCSharpLanguageVersionAnalyzer">
            <summary>
            A diagnostic analyzer that generates an error whenever a source-generator attribute is used with not high enough C# version enabled.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.UnsupportedCSharpLanguageVersionAnalyzer.GeneratorAttributeNamesToFullyQualifiedNamesMap">
            <summary>
            The mapping of target attributes that will trigger the analyzer.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.UnsupportedCSharpLanguageVersionAnalyzer.SupportedDiagnostics">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.UnsupportedCSharpLanguageVersionAnalyzer.Initialize(Microsoft.CodeAnalysis.Diagnostics.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyAttributeWithPropertyTargetDiagnosticSuppressor">
            <summary>
            <para>
            A diagnostic suppressor to suppress CS0657 warnings for fields with [ObservableProperty] using a [property:] attribute list.
            </para>
            <para>
            That is, this diagnostic suppressor will suppress the following diagnostic:
            <code>
            public class MyViewModel : ObservableObject
            {
                [ObservableProperty]
                [property: JsonPropertyName("Name")]
                private string? name;
            }
            </code>
            </para>
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyAttributeWithPropertyTargetDiagnosticSuppressor.SupportedSuppressions">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.ObservablePropertyAttributeWithPropertyTargetDiagnosticSuppressor.ReportSuppressions(Microsoft.CodeAnalysis.Diagnostics.SuppressionAnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors">
            <summary>
            A container for all <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> instances for errors reported by analyzers in this project.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InheritFromObservableObjectInsteadOfUsingINotifyPropertyChangedAttributeId">
            <summary>
            The diagnostic id for <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InheritFromObservableObjectInsteadOfUsingINotifyPropertyChangedAttributeWarning"/>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InheritFromObservableObjectInsteadOfUsingObservableObjectAttributeId">
            <summary>
            The diagnostic id for <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InheritFromObservableObjectInsteadOfUsingObservableObjectAttributeWarning"/>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.FieldReferenceForObservablePropertyFieldId">
            <summary>
            The diagnostic id for <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.FieldReferenceForObservablePropertyFieldWarning"/>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.DuplicateINotifyPropertyChangedInterfaceForINotifyPropertyChangedAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a duplicate declaration of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> would happen.
            <para>
            Format: <c>"Cannot apply [INotifyPropertyChangedAttribute] to type {0}, as it already declares the INotifyPropertyChanged interface"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.DuplicateINotifyPropertyChangedInterfaceForObservableObjectAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a duplicate declaration of <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> would happen.
            <para>
            Format: <c>"Cannot apply [ObservableObjectAttribute] to type {0}, as it already declares the INotifyPropertyChanged interface"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.DuplicateINotifyPropertyChangingInterfaceForObservableObjectAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a duplicate declaration of <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> would happen.
            <para>
            Format: <c>"Cannot apply [ObservableObjectAttribute] to type {0}, as it already declares the INotifyPropertyChanging interface"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.DuplicateObservableRecipientError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a duplicate declaration of <see cref="T:System.ComponentModel.INotifyPropertyChanging"/> would happen.
            <para>
            Format: <c>"Cannot apply [ObservableRecipientAttribute] to type {0}, as it already inherits from the ObservableRecipient class"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.MissingBaseObservableObjectFunctionalityError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when there is a missing base functionality to enable <c>ObservableRecipientAttribute</c>.
            <para>
            Format: <c>"Cannot apply [ObservableRecipientAttribute] to type {0}, as it lacks necessary base functionality (it should either inherit from ObservableObject, or be annotated with [ObservableObjectAttribute] or [INotifyPropertyChangedAttribute])"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.MissingObservableValidatorInheritanceForValidationAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when the target type doesn't inherit from the <c>ObservableValidator</c> class.
            <para>
            Format: <c>"The field {0}.{1} cannot be used to generate an observable property, as it has {2} validation attribute(s) but is declared in a type that doesn't inherit from ObservableValidator"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidRelayCommandMethodSignatureError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when an annotated method to generate a command for has an invalid signature.
            <para>
            Format: <c>"The method {0}.{1} cannot be used to generate a command property, as its signature isn't compatible with any of the existing relay command types"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.UnsupportedCSharpLanguageVersionError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when an unsupported C# language version is being used.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidCanExecuteMemberNameError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a specified <c>CanExecute</c> name has no matching member.
            <para>
            Format: <c>"The CanExecute name must refer to a valid member, but "{0}" has no matches in type {1}"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.MultipleCanExecuteMemberNameMatchesError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a specified <c>CanExecute</c> name maps to multiple members.
            <para>
            Format: <c>"The CanExecute name must refer to a single member, but "{0}" has multiple matches in type {1}"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidCanExecuteMemberError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a a specified <c>CanExecute</c> name maps to an invalid member.
            <para>
            Format: <c>"The CanExecute name must refer to a compatible member, but no valid members were found for "{0}" in type {1}"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidConcurrentExecutionsParameterError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>RelayCommandAttribute.AllowConcurrentExecutions</c> is being set for a non-asynchronous method.
            <para>
            Format: <c>"The method {0}.{1} cannot be annotated with the [RelayCommand] attribute specifying a concurrency control option, as it maps to a non-asynchronous command type"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidIncludeCancelCommandParameterError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>RelayCommandAttribute.IncludeCancelCommandParameter</c> is being set for an invalid method.
            <para>
            Format: <c>"The method {0}.{1} cannot be annotated with the [RelayCommand] attribute specifying to include a cancel command, as it does not map to an asynchronous command type taking a cancellation token"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.ObservablePropertyNameCollisionError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a generated property created with <c>[ObservableProperty]</c> would collide with the source field.
            <para>
            Format: <c>"The field {0}.{1} cannot be used to generate an observable property, as its name would collide with the field name (instance fields should use the "lowerCamel", "_lowerCamel" or "m_lowerCamel" pattern)</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.NotifyPropertyChangedForInvalidTargetError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when the specified target for <c>[NotifyPropertyChangedFor]</c> is not valid.
            <para>
            Format: <c>"The target(s) of [NotifyPropertyChangedFor] must be a (different) accessible property, but "{0}" has no (other) matches in type {1}</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.NotifyCanExecuteChangedForInvalidTargetError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when the specified target for <c>[NotifyCanExecuteChangedFor]</c> is not valid.
            <para>
            Format: <c>"The target(s) of [NotifyCanExecuteChangedFor] must be an accessible <c>IRelayCommand</c> property, but "{0}" has no matches in type {1}</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidAttributeCombinationForINotifyPropertyChangedAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[INotifyPropertyChanged]</c> is applied to a type with an attribute already.
            <para>
            Format: <c>"Cannot apply [INotifyPropertyChanged] to type {0}, as it already has this attribute or [ObservableObject] applied to it (including base types)"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidAttributeCombinationForObservableObjectAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[ObservableObject]</c> is applied to a type with an attribute already.
            <para>
            Format: <c>"Cannot apply [ObservableObject] to type {0}, as it already has this attribute or [INotifyPropertyChanged] applied to it (including base types)"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidContainingTypeForObservablePropertyFieldError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[ObservableProperty]</c> is applied to a field in an invalid type.
            <para>
            Format: <c>"The field {0}.{1} cannot be used to generate an observable property, as its containing type doesn't inherit from ObservableObject, nor does it use [ObservableObject] or [INotifyPropertyChanged]"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.FieldWithOrphanedDependentObservablePropertyAttributesError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[ObservableProperty]</c> is applied to a field in an invalid type.
            <para>
            Format: <c>"The field {0}.{1} needs to be annotated with [ObservableProperty] in order to enable using [NotifyPropertyChangedFor], [NotifyCanExecuteChangedFor], [NotifyPropertyChangedRecipients] and [NotifyDataErrorInfo]"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidAttributeCombinationForObservableRecipientAttributeError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[ObservableRecipient]</c> is applied to a type with an attribute already.
            <para>
            Format: <c>"Cannot apply [ObservableRecipient] to type {0}, as it already inherits this attribute from a base type"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidContainingTypeForNotifyPropertyChangedRecipientsFieldError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[NotifyPropertyChangedRecipients]</c> is applied to a field in an invalid type.
            <para>
            Format: <c>"The field {0}.{1} cannot be annotated with [NotifyPropertyChangedRecipients], as its containing type doesn't inherit from ObservableRecipient, nor does it use [ObservableRecipient]"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.MultipleRelayCommandMethodOverloadsError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a specified <c>[RelayCommand]</c> method has any overloads.
            <para>
            Format: <c>"The CanExecute name must refer to a single member, but "{0}" has multiple matches in type {1}"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidObservablePropertyError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a generated property created with <c>[ObservableProperty]</c> would cause conflicts with other generated members.
            <para>
            Format: <c>"The field {0}.{1} cannot be used to generate an observable property, as its name or type would cause conflicts with other generated members"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.MissingObservableValidatorInheritanceForNotifyDataErrorInfoError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when the target type doesn't inherit from the <c>ObservableValidator</c> class.
            <para>
            Format: <c>"The field {0}.{1} cannot be annotated with [NotifyDataErrorInfo], as it is declared in a type that doesn't inherit from ObservableValidator"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.MissingValidationAttributesForNotifyDataErrorInfoError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when the target field uses [NotifyDataErrorInfo] but has no validation attributes.
            <para>
            Format: <c>"The field {0}.{1} cannot be annotated with [NotifyDataErrorInfo], as it doesn't have any validation attributes to use during validation"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidTypeForNotifyPropertyChangedRecipientsError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[NotifyPropertyChangedRecipients]</c> is applied to an invalid type.
            <para>
            Format: <c>"The type {0} cannot be annotated with [NotifyPropertyChangedRecipients], as it doesn't inherit from ObservableRecipient, nor does it use [ObservableRecipient]"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidTypeForNotifyDataErrorInfoError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[NotifyDataErrorInfo]</c> is applied to an invalid type.
            <para>
            Format: <c>"The type {0} cannot be annotated with [NotifyDataErrorInfo], as it doesn't inherit from ObservableValidator"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.UnnecessaryNotifyPropertyChangedRecipientsAttributeOnFieldWarning">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[NotifyPropertyChangedRecipients]</c> is applied to a field in a class with <c>[NotifyPropertyChangedRecipients]</c> used at the class-level.
            <para>
            Format: <c>"The field {0}.{1} is annotated with [NotifyPropertyChangedRecipients], but that is not needed since its containing type already uses or inherits [NotifyPropertyChangedRecipients] at the class-level"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.UnnecessaryNotifyDataErrorInfoAttributeOnFieldWarning">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[NotifyDataErrorInfo]</c> is applied to a field in a class with <c>[NotifyDataErrorInfo]</c> used at the class-level.
            <para>
            Format: <c>"The field {0}.{1} is annotated with [NotifyDataErrorInfo], but that is not needed since its containing type already uses or inherits [NotifyDataErrorInfo] at the class-level"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidFlowExceptionsToTaskSchedulerParameterError">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>RelayCommandAttribute.FlowExceptionsToTaskScheduler</c> is being set for a non-asynchronous method.
            <para>
            Format: <c>"The method {0}.{1} cannot be annotated with the [RelayCommand] attribute specifying an exception flow option, as it maps to a non-asynchronous command type"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InheritFromObservableObjectInsteadOfUsingINotifyPropertyChangedAttributeWarning">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[INotifyPropertyChanged]</c> is used on a type that could inherit from <c>ObservableObject</c> instead.
            <para>
            Format: <c>"The type {0} is using the [INotifyPropertyChanged] attribute while having no base type, and it should instead inherit from ObservableObject"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InheritFromObservableObjectInsteadOfUsingObservableObjectAttributeWarning">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when <c>[ObservableObject]</c> is used on a type that could inherit from <c>ObservableObject</c> instead.
            <para>
            Format: <c>"The type {0} is using the [ObservableObject] attribute while having no base type, and it should instead inherit from ObservableObject"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.FieldReferenceForObservablePropertyFieldWarning">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a field with <c>[ObservableProperty]</c> is being directly referenced.
            <para>
            Format: <c>"The field {0} is annotated with [ObservableProperty] and should not be directly referenced (use the generated property instead)"</c>.
            </para>
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.DiagnosticDescriptors.InvalidPropertyTargetedAttributeOnObservablePropertyField">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> indicating when a field with <c>[ObservableProperty]</c> is using an invalid attribute targeting the property.
            <para>
            Format: <c>"The field {0} annotated with [ObservableProperty] is using attribute "{1}" which was not recognized as a valid type (are you missing a using directive?)"</c>.
            </para>
            </summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.SuppressionDescriptors">
            <summary>
            A container for all <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.SuppressionDescriptors"/> instances for suppressed diagnostics by analyzers in this project.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Diagnostics.SuppressionDescriptors.PropertyAttributeListForObservablePropertyField">
            <summary>
            Gets a <see cref="T:Microsoft.CodeAnalysis.SuppressionDescriptor"/> for a field using [ObservableProperty] with on attribute list targeting a property.
            </summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.AttributeDataExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.AttributeDataExtensions.HasNamedArgument``1(Microsoft.CodeAnalysis.AttributeData,System.String,``0)">
            <summary>
            Checks whether a given <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance contains a specified named argument.
            </summary>
            <typeparam name="T">The type of argument to check.</typeparam>
            <param name="attributeData">The target <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance to check.</param>
            <param name="name">The name of the argument to check.</param>
            <param name="value">The expected value for the target named argument.</param>
            <returns>Whether or not <paramref name="attributeData"/> contains an argument named <paramref name="name"/> with the expected value.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.AttributeDataExtensions.GetNamedArgument``1(Microsoft.CodeAnalysis.AttributeData,System.String,``0)">
            <summary>
            Gets a given named argument value from an <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance, or a fallback value.
            </summary>
            <typeparam name="T">The type of argument to check.</typeparam>
            <param name="attributeData">The target <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance to check.</param>
            <param name="name">The name of the argument to check.</param>
            <param name="fallback">The fallback value to use if the named argument is not present.</param>
            <returns>The argument named <paramref name="name"/>, or a fallback value.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.AttributeDataExtensions.TryGetNamedArgument``1(Microsoft.CodeAnalysis.AttributeData,System.String,``0@)">
            <summary>
            Tries to get a given named argument value from an <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance, if present.
            </summary>
            <typeparam name="T">The type of argument to check.</typeparam>
            <param name="attributeData">The target <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance to check.</param>
            <param name="name">The name of the argument to check.</param>
            <param name="value">The resulting argument value, if present.</param>
            <returns>Whether or not <paramref name="attributeData"/> contains an argument named <paramref name="name"/> with a valid value.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.AttributeDataExtensions.GetConstructorArguments``1(Microsoft.CodeAnalysis.AttributeData)">
            <summary>
            Enumerates all items in a flattened sequence of constructor arguments for a given <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance.
            </summary>
            <typeparam name="T">The type of constructor arguments to retrieve.</typeparam>
            <param name="attributeData">The target <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance to get the arguments from.</param>
            <returns>A sequence of all constructor arguments of the specified type from <paramref name="attributeData"/>.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.CompilationExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.Compilation"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.CompilationExtensions.HasLanguageVersionAtLeastEqualTo(Microsoft.CodeAnalysis.Compilation,Microsoft.CodeAnalysis.CSharp.LanguageVersion)">
            <summary>
            Checks whether a given compilation (assumed to be for C#) is using at least a given language version.
            </summary>
            <param name="compilation">The <see cref="T:Microsoft.CodeAnalysis.Compilation"/> to consider for analysis.</param>
            <param name="languageVersion">The minimum language version to check.</param>
            <returns>Whether <paramref name="compilation"/> is using at least the specified language version.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.CompilationExtensions.HasAccessibleTypeWithMetadataName(Microsoft.CodeAnalysis.Compilation,System.String)">
            <summary>
            <para>
            Checks whether or not a type with a specified metadata name is accessible from a given <see cref="T:Microsoft.CodeAnalysis.Compilation"/> instance.
            </para>
            <para>
            This method enumerates candidate type symbols to find a match in the following order:
            <list type="number">
              <item><description>
                If only one type with the given name is found within the compilation and its referenced assemblies, check its accessibility.
              </description></item>
              <item><description>
                If the current <paramref name="compilation"/> defines the symbol, check its accessibility.
              </description></item>
              <item><description>
                Otherwise, check whether the type exists and is accessible from any of the referenced assemblies.
              </description></item>
            </list>
            </para>
            </summary>
            <param name="compilation">The <see cref="T:Microsoft.CodeAnalysis.Compilation"/> to consider for analysis.</param>
            <param name="fullyQualifiedMetadataName">The fully-qualified metadata type name to find.</param>
            <returns>Whether a type with the specified metadata name can be accessed from the given compilation.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.CompilationExtensions.TryBuildNamedTypeSymbolMap``1(Microsoft.CodeAnalysis.Compilation,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,System.String}},System.Collections.Immutable.ImmutableDictionary{``0,Microsoft.CodeAnalysis.INamedTypeSymbol}@)">
            <summary>
            Tries to build a map of <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instances form the input mapping of names.
            </summary>
            <typeparam name="T">The type of keys for each symbol.</typeparam>
            <param name="compilation">The <see cref="T:Microsoft.CodeAnalysis.Compilation"/> to consider for analysis.</param>
            <param name="typeNames">The input mapping of <typeparamref name="T"/> keys to fully qualified type names.</param>
            <param name="typeSymbols">The resulting mapping of <typeparamref name="T"/> keys to resolved <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instances.</param>
            <returns>Whether all requested <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instances could be resolved.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.DiagnosticsExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.CodeAnalysis.GeneratorExecutionContext"/>, specifically for reporting diagnostics.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.DiagnosticsExtensions.Add(CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.ISymbol,System.Object[])">
            <summary>
            Adds a new diagnostics to the target builder.
            </summary>
            <param name="diagnostics">The collection of produced <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo"/> instances.</param>
            <param name="descriptor">The input <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> for the diagnostics to create.</param>
            <param name="symbol">The source <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> to attach the diagnostics to.</param>
            <param name="args">The optional arguments for the formatted message to include.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.DiagnosticsExtensions.Add(CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxNode,System.Object[])">
            <summary>
            Adds a new diagnostics to the target builder.
            </summary>
            <param name="diagnostics">The collection of produced <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo"/> instances.</param>
            <param name="descriptor">The input <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> for the diagnostics to create.</param>
            <param name="node">The source <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> to attach the diagnostics to.</param>
            <param name="args">The optional arguments for the formatted message to include.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.DiagnosticsExtensions.ReportDiagnostics(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValuesProvider{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo})">
            <summary>
            Registers an output node into an <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> to output diagnostics.
            </summary>
            <param name="context">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> instance.</param>
            <param name="diagnostics">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> sequence of diagnostics.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.DiagnosticsExtensions.ReportDiagnostics(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValuesProvider{CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}})">
            <summary>
            Registers an output node into an <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> to output diagnostics.
            </summary>
            <param name="context">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> instance.</param>
            <param name="diagnostics">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> sequence of diagnostics.</param>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.INamedTypeSymbolExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.INamedTypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets all member symbols from a given <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance, including inherited ones.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance.</param>
            <returns>A sequence of all member symbols for <paramref name="symbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.INamedTypeSymbolExtensions.GetAllMembers(Microsoft.CodeAnalysis.INamedTypeSymbol,System.String)">
            <summary>
            Gets all member symbols from a given <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance, including inherited ones.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance.</param>
            <param name="name">The name of the members to look for.</param>
            <returns>A sequence of all member symbols for <paramref name="symbol"/>.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalGeneratorInitializationContextExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalGeneratorInitializationContextExtensions.RegisterConditionalSourceOutput(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValueProvider{System.Boolean},System.Action{Microsoft.CodeAnalysis.SourceProductionContext})">
            <summary>
            Conditionally invokes <see cref="M:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext.RegisterSourceOutput``1(Microsoft.CodeAnalysis.IncrementalValueProvider{``0},System.Action{Microsoft.CodeAnalysis.SourceProductionContext,``0})"/>
            if the value produced by the input <see cref="T:Microsoft.CodeAnalysis.IncrementalValueProvider`1"/> is <see langword="true"/>.
            </summary>
            <param name="context">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> value being used.</param>
            <param name="source">The source <see cref="T:Microsoft.CodeAnalysis.IncrementalValueProvider`1"/> instance.</param>
            <param name="action">The conditional <see cref="T:System.Action"/> to invoke.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalGeneratorInitializationContextExtensions.RegisterConditionalImplementationSourceOutput``1(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValueProvider{System.ValueTuple{System.Boolean,``0}},System.Action{Microsoft.CodeAnalysis.SourceProductionContext,``0})">
            <summary>
            Conditionally invokes <see cref="M:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext.RegisterImplementationSourceOutput``1(Microsoft.CodeAnalysis.IncrementalValueProvider{``0},System.Action{Microsoft.CodeAnalysis.SourceProductionContext,``0})"/>
            if the value produced by the input <see cref="T:Microsoft.CodeAnalysis.IncrementalValueProvider`1"/> is <see langword="true"/>, and also supplying a given input state.
            </summary>
            <typeparam name="T">The type of state to pass to the source production callback to invoke.</typeparam>
            <param name="context">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> value being used.</param>
            <param name="source">The source <see cref="T:Microsoft.CodeAnalysis.IncrementalValueProvider`1"/> instance.</param>
            <param name="action">The conditional <see cref="T:System.Action`1"/> to invoke.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalGeneratorInitializationContextExtensions.ReportDiagnostics(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValuesProvider{System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostic}})">
            <summary>
            Registers an output node into an <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> to output diagnostics.
            </summary>
            <param name="context">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> instance.</param>
            <param name="diagnostics">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> sequence of diagnostics.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalGeneratorInitializationContextExtensions.ReportDiagnostics(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext,Microsoft.CodeAnalysis.IncrementalValuesProvider{Microsoft.CodeAnalysis.Diagnostic})">
            <summary>
            Registers an output node into an <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> to output diagnostics.
            </summary>
            <param name="context">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext"/> instance.</param>
            <param name="diagnostics">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> sequence of diagnostics.</param>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalValuesProviderExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.IncrementalValuesProviderExtensions.GroupBy``4(Microsoft.CodeAnalysis.IncrementalValuesProvider{System.ValueTuple{``0,``1}},System.Func{System.ValueTuple{``0,``1},``2},System.Func{System.ValueTuple{``0,``1},``3})">
            <summary>
            Groups items in a given <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> sequence by a specified key.
            </summary>
            <typeparam name="TLeft">The type of left items in each tuple.</typeparam>
            <typeparam name="TRight">The type of right items in each tuple.</typeparam>
            <typeparam name="TKey">The type of resulting key elements.</typeparam>
            <typeparam name="TElement">The type of resulting projected elements.</typeparam>
            <param name="source">The input <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> instance.</param>
            <param name="keySelector">The key selection <see cref="T:System.Func`2"/>.</param>
            <param name="elementSelector">The element selection <see cref="T:System.Func`2"/>.</param>
            <returns>An <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> with the grouped results.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.GetFullyQualifiedName(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the fully qualified name for a given symbol.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance.</param>
            <returns>The fully qualified name for <paramref name="symbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.GetFullyQualifiedNameWithNullabilityAnnotations(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Gets the fully qualified name for a given symbol, including nullability annotations
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance.</param>
            <returns>The fully qualified name for <paramref name="symbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.HasFullyQualifiedName(Microsoft.CodeAnalysis.ISymbol,System.String)">
            <summary>
            Checks whether or not a given type symbol has a specified full name.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check.</param>
            <param name="name">The full name to check.</param>
            <returns>Whether <paramref name="symbol"/> has a full name equals to <paramref name="name"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.HasAttributeWithFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ISymbol,System.String)">
            <summary>
            Checks whether or not a given symbol has an attribute with the specified fully qualified metadata name.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check.</param>
            <param name="name">The attribute name to look for.</param>
            <returns>Whether or not <paramref name="symbol"/> has an attribute with the specified name.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.HasAttributeWithType(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks whether or not a given symbol has an attribute with the specified fully qualified metadata name.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check.</param>
            <param name="typeSymbol">The <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance for the attribute type to look for.</param>
            <returns>Whether or not <paramref name="symbol"/> has an attribute with the specified type.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.TryGetAttributeWithFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ISymbol,System.String,Microsoft.CodeAnalysis.AttributeData@)">
            <summary>
            Tries to get an attribute with the specified fully qualified metadata name.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check.</param>
            <param name="name">The attribute name to look for.</param>
            <param name="attributeData">The resulting attribute, if it was found.</param>
            <returns>Whether or not <paramref name="symbol"/> has an attribute with the specified name.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.GetEffectiveAccessibility(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Calculates the effective accessibility for a given symbol.
            </summary>
            <param name="symbol">The <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check.</param>
            <returns>The effective accessibility for <paramref name="symbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ISymbolExtensions.CanBeAccessedFrom(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.IAssemblySymbol)">
            <summary>
            Checks whether or not a given symbol can be accessed from a specified assembly.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check.</param>
            <param name="assembly">The assembly to check the accessibility of <paramref name="symbol"/> for.</param>
            <returns>Whether <paramref name="assembly"/> can access <paramref name="symbol"/>.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.HasOrInheritsFromFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> has or inherits from a specified type.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="name">The full name of the type to check for inheritance.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> is or inherits from <paramref name="name"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.InheritsFromFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> inherits from a specified type.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="name">The full name of the type to check for inheritance.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> inherits from <paramref name="name"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.InheritsFromType(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> inherits from a specified type.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="baseTypeSymbol">The <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instane to check for inheritance from.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> inherits from <paramref name="baseTypeSymbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.HasInterfaceWithFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> implements an interface with a specified name.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="name">The full name of the type to check for interface implementation.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> has an interface with the specified name.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.HasOrInheritsAttribute(Microsoft.CodeAnalysis.ITypeSymbol,System.Func{Microsoft.CodeAnalysis.AttributeData,System.Boolean})">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> has or inherits a specified attribute.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="predicate">The predicate used to match available attributes.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> has an attribute matching <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.HasOrInheritsAttributeWithFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> has or inherits a specified attribute.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="name">The name of the attribute to look for.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> has an attribute with the specified type name.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.HasOrInheritsAttributeWithType(Microsoft.CodeAnalysis.ITypeSymbol,Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> has or inherits a specified attribute.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="baseTypeSymbol">The <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instane to check for inheritance from.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> has or inherits an attribute of type <paramref name="baseTypeSymbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.InheritsAttributeWithFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Checks whether or not a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> inherits a specified attribute.
            If the type has no base type, this method will automatically handle that and return <see langword="false"/>.
            </summary>
            <param name="typeSymbol">The target <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="name">The name of the attribute to look for.</param>
            <returns>Whether or not <paramref name="typeSymbol"/> has an attribute with the specified type name.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.HasFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,System.String)">
            <summary>
            Checks whether or not a given type symbol has a specified fully qualified metadata name.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance to check.</param>
            <param name="name">The full name to check.</param>
            <returns>Whether <paramref name="symbol"/> has a full name equals to <paramref name="name"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.GetFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol)">
            <summary>
            Gets the fully qualified metadata name for a given <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance.</param>
            <returns>The fully qualified metadata name for <paramref name="symbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.ITypeSymbolExtensions.AppendFullyQualifiedMetadataName(Microsoft.CodeAnalysis.ITypeSymbol,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{System.Char}@)">
            <summary>
            Appends the fully qualified metadata name for a given symbol to a target builder.
            </summary>
            <param name="symbol">The input <see cref="T:Microsoft.CodeAnalysis.ITypeSymbol"/> instance.</param>
            <param name="builder">The target <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1"/> instance.</param>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.MemberDeclarationSyntaxExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.MemberDeclarationSyntaxExtensions.ReplaceModifier(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Replaces a specific modifier.
            </summary>
            <param name="memberDeclaration">The input <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instance.</param>
            <param name="oldKind">The target modifier kind to replace.</param>
            <param name="newKind">The new modifier kind to add or replace.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instance with the target modifier.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.MemberDeclarationSyntaxExtensions.RemoveModifier(Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax,Microsoft.CodeAnalysis.CSharp.SyntaxKind)">
            <summary>
            Removes a specific modifier.
            </summary>
            <param name="memberDeclaration">The input <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instance.</param>
            <param name="kind">The modifier kind to remove.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instance without the specified modifier.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.SyntaxNodeExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.SyntaxNodeExtensions.IsFirstSyntaxDeclarationForSymbol(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Checks whether a given <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> represents the first (partial) declaration of a given symbol.
            </summary>
            <param name="syntaxNode">The input <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> instance.</param>
            <param name="symbol">The target <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> instance to check the syntax declaration for.</param>
            <returns>Whether <paramref name="syntaxNode"/> is the first (partial) declaration for <paramref name="symbol"/>.</returns>
            <remarks>
            This extension can be used to avoid accidentally generating repeated members for types that have multiple partial declarations.
            In order to keep this check efficient and without the need to collect all items and build some sort of hashset from them to
            remove duplicates, each syntax node is symply compared against the available declaring syntax references for the target symbol.
            If the syntax node matches the first syntax reference for the symbol, it is kept, otherwise it is considered a duplicate.
            </remarks>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Extensions.TypeDeclarationSyntaxExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.TypeDeclarationSyntaxExtensions.HasOrPotentiallyHasBaseTypes(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Checks whether a given <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> has or could possibly have any base types, using only syntax.
            </summary>
            <param name="typeDeclaration">The input <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> instance to check.</param>
            <returns>Whether <paramref name="typeDeclaration"/> has or could possibly have any base types.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Extensions.TypeDeclarationSyntaxExtensions.HasOrPotentiallyHasAttributes(Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax)">
            <summary>
            Checks whether a given <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> has or could possibly have any attributes, using only syntax.
            </summary>
            <param name="typeDeclaration">The input <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> instance to check.</param>
            <returns>Whether <paramref name="typeDeclaration"/> has or could possibly have any attributes.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray">
            <summary>
            Extensions for <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray.AsEquatableArray``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Creates an <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance from a given <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <typeparam name="T">The type of items in the input array.</typeparam>
            <param name="array">The input <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> instance.</param>
            <returns>An <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance from a given <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1">
            <summary>
            An imutable, equatable array. This is equivalent to <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> but with value equality support.
            </summary>
            <typeparam name="T">The type of values in the array.</typeparam>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.array">
            <summary>
            The underlying <typeparamref name="T"/> array.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.#ctor(System.Collections.Immutable.ImmutableArray{`0})">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance.
            </summary>
            <param name="array">The input <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> to wrap.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.Item(System.Int32)">
            <summary>
            Gets a reference to an item at a specified position within the array.
            </summary>
            <param name="index">The index of the item to retrieve a reference to.</param>
            <returns>A reference to an item at a specified position within the array.</returns>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current array is empty.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.Equals(CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0})">
            <sinheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.Equals(System.Object)">
            <sinheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.GetHashCode">
            <sinheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.AsImmutableArray">
            <summary>
            Gets an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> instance from the current <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/>.
            </summary>
            <returns>The <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> from the current <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.FromImmutableArray(System.Collections.Immutable.ImmutableArray{`0})">
            <summary>
            Creates an <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance from a given <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <param name="array">The input <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> instance.</param>
            <returns>An <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance from a given <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.AsSpan">
            <summary>
            Returns a <see cref="T:System.ReadOnlySpan`1"/> wrapping the current items.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> wrapping the current items.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.ToArray">
            <summary>
            Copies the contents of this <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance. to a mutable array.
            </summary>
            <returns>The newly instantiated array.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Immutable.ImmutableArray`1.Enumerator"/> value to traverse items in the current array.
            </summary>
            <returns>An <see cref="T:System.Collections.Immutable.ImmutableArray`1.Enumerator"/> value to traverse items in the current array.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <sinheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.System#Collections#IEnumerable#GetEnumerator">
            <sinheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.op_Implicit(System.Collections.Immutable.ImmutableArray{`0})~CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0}">
            <summary>
            Implicitly converts an <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> to <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/>.
            </summary>
            <returns>An <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> instance from a given <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.op_Implicit(CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0})~System.Collections.Immutable.ImmutableArray{`0}">
            <summary>
            Implicitly converts an <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> to <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> instance from a given <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.op_Equality(CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0},CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0})">
            <summary>
            Checks whether two <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> values are the same.
            </summary>
            <param name="left">The first <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> value.</param>
            <param name="right">The second <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> value.</param>
            <returns>Whether <paramref name="left"/> and <paramref name="right"/> are equal.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1.op_Inequality(CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0},CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{`0})">
            <summary>
            Checks whether two <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> values are not the same.
            </summary>
            <param name="left">The first <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> value.</param>
            <param name="right">The second <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray`1"/> value.</param>
            <returns>Whether <paramref name="left"/> and <paramref name="right"/> are not equal.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1">
            <summary>
            A helper type to build sequences of values with pooled buffers.
            </summary>
            <typeparam name="T">The type of items to create sequences for.</typeparam>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.SharedObjectPool">
            <summary>
            The shared <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1"/> instance to share <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer"/> objects.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.writer">
            <summary>
            The rented <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer"/> instance to use.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Rent">
            <summary>
            Creates a <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1"/> value with a pooled underlying data writer.
            </summary>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1"/> instance to write data to.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.#ctor(CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{`0}.Writer)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1"/> object with the specified parameters.
            </summary>
            <param name="writer">The target data writer to use.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Count">
            <inheritdoc cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count"/>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.WrittenSpan">
            <summary>
            Gets the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Add(`0)">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)"/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.AddRange(System.ReadOnlySpan{`0})">
            <summary>
            Adds the specified items to the end of the array.
            </summary>
            <param name="items">The items to add at the end of the array.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.ToImmutable">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable"/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.ToArray">
            <inheritdoc cref="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray"/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer">
            <summary>
            A class handling the actual buffer writing.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.array">
            <summary>
            The underlying <typeparamref name="T"/> array.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.index">
            <summary>
            The starting offset within <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.array"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.#ctor">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer"/> instance with the specified parameters.
            </summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.Count">
            <inheritdoc cref="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Count"/>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.WrittenSpan">
            <inheritdoc cref="P:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.WrittenSpan"/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.Add(`0)">
            <inheritdoc cref="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Add(`0)"/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.AddRange(System.ReadOnlySpan{`0})">
            <inheritdoc cref="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.AddRange(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.Clear">
            <summary>
            Clears the items in the current writer.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.array"/> has enough free space to contain a given number of new items.
            </summary>
            <param name="requestedSize">The minimum number of items to ensure space for in <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.array"/>.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.ResizeBuffer(System.Int32)">
            <summary>
            Resizes <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.array"/> to ensure it can fit the specified number of new items.
            </summary>
            <param name="sizeHint">The minimum number of items to ensure space for in <see cref="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1.Writer.array"/>.</param>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder">
            <summary>
            Private helpers for the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder`1"/> type.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder.ThrowArgumentOutOfRangeExceptionForIndex">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> for <c>"index"</c>.
            </summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1">
            <summary>
            <para>
            Generic implementation of object pooling pattern with predefined pool size limit. The main purpose
            is that limited number of frequently used objects can be kept in the pool for further recycling.
            </para>
            <para>
            Notes:
            <list type="number">
              <item>
                It is not the goal to keep all returned objects. Pool is not meant for storage. If there
                is no space in the pool, extra returned objects will be dropped.
              </item>
              <item>
                It is implied that if object was obtained from a pool, the caller will return it back in
                a relatively short time. Keeping checked out objects for long durations is ok, but 
                reduces usefulness of pooling. Just new up your own.
              </item>
            </list>
            </para>
            <para>
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: if there is no intent for reusing the object, do not use pool - just use "new". 
            </para>
            </summary>
            <typeparam name="T">The type of objects to pool.</typeparam>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.factory">
            <summary>
            The factory is stored for the lifetime of the pool. We will call this only when pool needs to
            expand. compared to "new T()", Func gives more flexibility to implementers and faster than "new T()".
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.items">
            <summary>
            The array of cached items.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.firstItem">
            <summary>
            Storage for the pool objects. The first item is stored in a dedicated field
            because we expect to be able to satisfy most requests from it.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1"/> instance with the specified parameters.
            </summary>
            <param name="factory">The input factory to produce <typeparamref name="T"/> items.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1"/> instance with the specified parameters.
            </summary>
            <param name="factory">The input factory to produce <typeparamref name="T"/> items.</param>
            <param name="size">The pool size to use.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.Allocate">
            <summary>
            Produces a <typeparamref name="T"/> instance.
            </summary>
            <returns>The returned <typeparamref name="T"/> item to use.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.Free(`0)">
            <summary>
            Returns a given <typeparamref name="T"/> instance to the pool.
            </summary>
            <param name="obj">The <typeparamref name="T"/> instance to return.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.AllocateSlow">
            <summary>
            Allocates a new <typeparamref name="T"/> item.
            </summary>
            <returns>The returned <typeparamref name="T"/> item to use.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.FreeSlow(`0)">
            <summary>
            Frees a given <typeparamref name="T"/> item.
            </summary>
            <param name="obj">The <typeparamref name="T"/> item to return to the pool.</param>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.Element">
            <summary>
            A container for a produced item (using a <see langword="struct"/> wrapper to avoid covariance checks).
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Helpers.ObjectPool`1.Element.Value">
            <summary>
            The value held at the current element.
            </summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType">
            <summary>
            A type describing the type of expression for the "CanExecute" property of a command.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType.MethodInvocationLambdaWithDiscard">
            <summary>
            A method invocation lambda with discard: <c>_ => Method()</c>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType.PropertyAccessLambda">
            <summary>
            A property access lambda: <c>() => Property</c>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType.PropertyAccessLambdaWithDiscard">
            <summary>
            A property access lambda with discard: <c>_ => Property</c>.
            </summary>
        </member>
        <member name="F:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType.MethodGroup">
            <summary>
            A method group expression: <c>Method</c>.
            </summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo">
            <summary>
            A model with gathered info on a given command method.
            </summary>
            <param name="MethodName">The name of the target method.</param>
            <param name="FieldName">The resulting field name for the generated command.</param>
            <param name="PropertyName">The resulting property name for the generated command.</param>
            <param name="CommandInterfaceType">The command interface type name.</param>
            <param name="CommandClassType">The command class type name.</param>
            <param name="DelegateType">The delegate type name for the wrapped method.</param>
            <param name="CommandTypeArguments">The type arguments for <paramref name="CommandInterfaceType"/> and <paramref name="CommandClassType"/>, if any.</param>
            <param name="DelegateTypeArguments">The type arguments for <paramref name="DelegateType"/>, if any.</param>
            <param name="CanExecuteMemberName">The member name for the can execute check, if available.</param>
            <param name="CanExecuteExpressionType">The can execute expression type, if available.</param>
            <param name="AllowConcurrentExecutions">Whether or not concurrent executions have been enabled.</param>
            <param name="FlowExceptionsToTaskScheduler">Whether or not exceptions should flow to the task scheduler.</param>
            <param name="IncludeCancelCommand">Whether or not to also generate a cancel command.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String},CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String},System.String,System.Nullable{CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            A model with gathered info on a given command method.
            </summary>
            <param name="MethodName">The name of the target method.</param>
            <param name="FieldName">The resulting field name for the generated command.</param>
            <param name="PropertyName">The resulting property name for the generated command.</param>
            <param name="CommandInterfaceType">The command interface type name.</param>
            <param name="CommandClassType">The command class type name.</param>
            <param name="DelegateType">The delegate type name for the wrapped method.</param>
            <param name="CommandTypeArguments">The type arguments for <paramref name="CommandInterfaceType"/> and <paramref name="CommandClassType"/>, if any.</param>
            <param name="DelegateTypeArguments">The type arguments for <paramref name="DelegateType"/>, if any.</param>
            <param name="CanExecuteMemberName">The member name for the can execute check, if available.</param>
            <param name="CanExecuteExpressionType">The can execute expression type, if available.</param>
            <param name="AllowConcurrentExecutions">Whether or not concurrent executions have been enabled.</param>
            <param name="FlowExceptionsToTaskScheduler">Whether or not exceptions should flow to the task scheduler.</param>
            <param name="IncludeCancelCommand">Whether or not to also generate a cancel command.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.MethodName">
            <summary>The name of the target method.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.FieldName">
            <summary>The resulting field name for the generated command.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.PropertyName">
            <summary>The resulting property name for the generated command.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.CommandInterfaceType">
            <summary>The command interface type name.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.CommandClassType">
            <summary>The command class type name.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.DelegateType">
            <summary>The delegate type name for the wrapped method.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.CommandTypeArguments">
            <summary>The type arguments for <paramref name="CommandInterfaceType"/> and <paramref name="CommandClassType"/>, if any.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.DelegateTypeArguments">
            <summary>The type arguments for <paramref name="DelegateType"/>, if any.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.CanExecuteMemberName">
            <summary>The member name for the can execute check, if available.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.CanExecuteExpressionType">
            <summary>The can execute expression type, if available.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.AllowConcurrentExecutions">
            <summary>Whether or not concurrent executions have been enabled.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.FlowExceptionsToTaskScheduler">
            <summary>Whether or not exceptions should flow to the task scheduler.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo.IncludeCancelCommand">
            <summary>Whether or not to also generate a cancel command.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator">
            <summary>
            A source generator for generating command properties from annotated methods.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute">
            <summary>
            A container for all the logic for <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetInfo(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.AttributeData,CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo@,System.Collections.Immutable.ImmutableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <summary>
            Processes a given annotated methods and produces command info, if possible.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance the method was annotated with.</param>
            <param name="commandInfo">The resulting <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo"/> instance, if successfully generated.</param>
            <param name="diagnostics">The resulting diagnostics from the processing operation.</param>
            <returns>Whether a <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo"/> instance could be generated successfully.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.GetSyntax(CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo)">
            <summary>
            Creates the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instances for a specified command.
            </summary>
            <param name="commandInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CommandInfo"/> instance with the info to generate the command.</param>
            <returns>The <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instances for the input command.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.IsCommandDefinitionUnique(Microsoft.CodeAnalysis.IMethodSymbol,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@)">
            <summary>
            Validates that a target method used as source for a command is unique within its containing type.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <returns>Whether or not <paramref name="methodSymbol"/> was unique within its containing type.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.GetGeneratedFieldAndPropertyNames(Microsoft.CodeAnalysis.IMethodSymbol)">
            <summary>
            Get the generated field and property names for the input method.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <returns>The generated field and property names for <paramref name="methodSymbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryMapCommandTypesFromMethod(Microsoft.CodeAnalysis.IMethodSymbol,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.String@,System.String@,System.String@,System.Boolean@,System.Collections.Immutable.ImmutableArray{System.String}@,System.Collections.Immutable.ImmutableArray{System.String}@,System.Collections.Immutable.ImmutableArray{System.String}@)">
            <summary>
            Gets the type symbols for the input method, if supported.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="commandInterfaceType">The command interface type name.</param>
            <param name="commandClassType">The command class type name.</param>
            <param name="delegateType">The delegate type name for the wrapped method.</param>
            <param name="supportsCancellation">Indicates whether or not the resulting command supports cancellation.</param>
            <param name="commandTypeArguments">The type arguments for <paramref name="commandInterfaceType"/> and <paramref name="commandClassType"/>, if any.</param>
            <param name="commandTypeArgumentsWithNullabilityAnnotations">Same as <paramref name="commandTypeArguments"/>, but with nullability annotations.</param>
            <param name="delegateTypeArgumentsWithNullabilityAnnotations">The type arguments for <paramref name="delegateType"/>, if any, with nullability annotations.</param>
            <returns>Whether or not <paramref name="methodSymbol"/> was valid and the requested types have been set.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetAllowConcurrentExecutionsSwitch(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.AttributeData,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.Boolean@)">
            <summary>
            Checks whether or not the user has requested to configure the handling of concurrent executions.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance the method was annotated with.</param>
            <param name="commandClassType">The command class type name.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="allowConcurrentExecutions">Whether or not concurrent executions have been enabled.</param>
            <returns>Whether or not a value for <paramref name="allowConcurrentExecutions"/> could be retrieved successfully.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetFlowExceptionsToTaskSchedulerSwitch(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.AttributeData,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.Boolean@)">
            <summary>
            Checks whether or not the user has requested to configure the task scheduler exception flow option.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance the method was annotated with.</param>
            <param name="commandClassType">The command class type name.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="flowExceptionsToTaskScheduler">Whether or not task scheduler exception flow have been enabled.</param>
            <returns>Whether or not a value for <paramref name="flowExceptionsToTaskScheduler"/> could be retrieved successfully.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetIncludeCancelCommandSwitch(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.AttributeData,System.String,System.Boolean,CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.Boolean@)">
            <summary>
            Checks whether or not the user has requested to also generate a cancel command.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance the method was annotated with.</param>
            <param name="commandClassType">The command class type name.</param>
            <param name="supportsCancellation">Indicates whether or not the command supports cancellation.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="generateCancelCommand">Whether or not concurrent executions have been enabled.</param>
            <returns>Whether or not a value for <paramref name="generateCancelCommand"/> could be retrieved successfully.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetCanExecuteExpressionType(Microsoft.CodeAnalysis.IMethodSymbol,Microsoft.CodeAnalysis.AttributeData,System.Collections.Immutable.ImmutableArray{System.String},CommunityToolkit.Mvvm.SourceGenerators.Helpers.ImmutableArrayBuilder{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo}@,System.String@,System.Nullable{CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType}@)">
            <summary>
            Tries to get the expression type for the "CanExecute" property, if available.
            </summary>
            <param name="methodSymbol">The input <see cref="T:Microsoft.CodeAnalysis.IMethodSymbol"/> instance to process.</param>
            <param name="attributeData">The <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> instance for <paramref name="methodSymbol"/>.</param>
            <param name="commandTypeArguments">The command type arguments, if any.</param>
            <param name="diagnostics">The current collection of gathered diagnostics.</param>
            <param name="canExecuteMemberName">The resulting can execute member name, if available.</param>
            <param name="canExecuteExpressionType">The resulting expression type, if available.</param>
            <returns>Whether or not a value for <paramref name="canExecuteMemberName"/> and <paramref name="canExecuteExpressionType"/> could be determined (may include <see langword="null"/>).</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetCanExecuteExpressionFromSymbol(Microsoft.CodeAnalysis.ISymbol,System.Collections.Immutable.ImmutableArray{System.String},System.Nullable{CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType}@)">
            <summary>
            Gets the expression type for the can execute logic, if possible.
            </summary>
            <param name="canExecuteSymbol">The can execute member symbol (either a method or a property).</param>
            <param name="commandTypeArguments">The type arguments for the command interface, if any.</param>
            <param name="canExecuteExpressionType">The resulting can execute expression type, if available.</param>
            <returns>Whether or not <paramref name="canExecuteExpressionType"/> was set and the input symbol was valid.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.RelayCommandGenerator.Execute.TryGetCanExecuteMemberFromGeneratedProperty(System.String,Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{System.String},System.Nullable{CommunityToolkit.Mvvm.SourceGenerators.Input.Models.CanExecuteExpressionType}@)">
            <summary>
            Gets the expression type for the can execute logic, if possible.
            </summary>
            <param name="memberName">The member name passed to <c>[RelayCommand(CanExecute = ...)]</c>.</param>
            <param name="containingType">The containing type for the method annotated with <c>[RelayCommand]</c>.</param>
            <param name="commandTypeArguments">The type arguments for the command interface, if any.</param>
            <param name="canExecuteExpressionType">The resulting can execute expression type, if available.</param>
            <returns>Whether or not <paramref name="canExecuteExpressionType"/> was set and the input symbol was valid.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator">
            <summary>
            A source generator for message registration without relying on compiled LINQ expressions.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Initialize(Microsoft.CodeAnalysis.IncrementalGeneratorInitializationContext)">
            <inheritdoc/>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute">
            <summary>
            A container for all the logic for <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator"/>.
            </summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute.GetInterfaces(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Gets the <c>IRecipient&lt;TMessage&gt;</c> interfaces from <paramref name="typeSymbol"/>, if any.
            </summary>
            <param name="typeSymbol">The input <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance to inspect.</param>
            <returns>An array of interface type symbols.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute.GetInfo(Microsoft.CodeAnalysis.INamedTypeSymbol,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.INamedTypeSymbol})">
            <summary>
            Gets the <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo"/> instance from the given info.
            </summary>
            <param name="typeSymbol">The type symbol for the target type being inspected.</param>
            <param name="interfaceSymbols">The input array of interface type symbols being handled.</param>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo"/> instance for the current type being inspected.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute.GetSyntax(System.Boolean)">
            <summary>
            Gets the head <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance.
            </summary>
            <param name="isDynamicallyAccessedMembersAttributeAvailable">Indicates whether <c>[DynamicallyAccessedMembers]</c> should be generated.</param>
            <returns>The head <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance with the type attributes.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute.GetSyntax(CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo)">
            <summary>
            Gets the <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance for the input recipient.
            </summary>
            <param name="recipientInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo"/> instance to process.</param>
            <returns>The generated <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance for <paramref name="recipientInfo"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute.EnumerateRegistrationStatements(CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo)">
            <summary>
            Gets a sequence of statements to register declared message handlers.
            </summary>
            <param name="recipientInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo"/> instance to process.</param>
            <returns>The sequence of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax"/> instances to register message handlers.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.IMessengerRegisterAllGenerator.Execute.EnumerateRegistrationStatementsWithTokens(CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo)">
            <summary>
            Gets a sequence of statements to register declared message handlers with a custom token.
            </summary>
            <param name="recipientInfo">The input <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo"/> instance to process.</param>
            <returns>The sequence of <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.StatementSyntax"/> instances to register message handlers.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo">
            <summary>
            A model with gathered info on all message types being handled by a recipient.
            </summary>
            <param name="FilenameHint">The filename hint for the current type.</param>
            <param name="TypeName">The fully qualified type name of the target type.</param>
            <param name="MessageTypes">The name of messages being received.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo.#ctor(System.String,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String})">
            <summary>
            A model with gathered info on all message types being handled by a recipient.
            </summary>
            <param name="FilenameHint">The filename hint for the current type.</param>
            <param name="TypeName">The fully qualified type name of the target type.</param>
            <param name="MessageTypes">The name of messages being received.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo.FilenameHint">
            <summary>The filename hint for the current type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo.TypeName">
            <summary>The fully qualified type name of the target type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Messaging.Models.RecipientInfo.MessageTypes">
            <summary>The name of messages being received.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo">
            <summary>
            A model for a serializeable diagnostic info.
            </summary>
            <param name="Descriptor">The wrapped <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> instance.</param>
            <param name="SyntaxTree">The tree to use as location for the diagnostic, if available.</param>
            <param name="TextSpan">The span to use as location for the diagnostic.</param>
            <param name="Arguments">The diagnostic arguments.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.#ctor(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxTree,Microsoft.CodeAnalysis.Text.TextSpan,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{System.String})">
            <summary>
            A model for a serializeable diagnostic info.
            </summary>
            <param name="Descriptor">The wrapped <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> instance.</param>
            <param name="SyntaxTree">The tree to use as location for the diagnostic, if available.</param>
            <param name="TextSpan">The span to use as location for the diagnostic.</param>
            <param name="Arguments">The diagnostic arguments.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.Descriptor">
            <summary>The wrapped <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> instance.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.SyntaxTree">
            <summary>The tree to use as location for the diagnostic, if available.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.TextSpan">
            <summary>The span to use as location for the diagnostic.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.Arguments">
            <summary>The diagnostic arguments.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.ToDiagnostic">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> instance with the state from this model.
            </summary>
            <returns>A new <see cref="T:Microsoft.CodeAnalysis.Diagnostic"/> instance with the state from this model.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.ISymbol,System.Object[])">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo"/> instance with the specified parameters.
            </summary>
            <param name="descriptor">The input <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> for the diagnostics to create.</param>
            <param name="symbol">The source <see cref="T:Microsoft.CodeAnalysis.ISymbol"/> to attach the diagnostics to.</param>
            <param name="args">The optional arguments for the formatted message to include.</param>
            <returns>A new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo"/> instance with the specified parameters.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo.Create(Microsoft.CodeAnalysis.DiagnosticDescriptor,Microsoft.CodeAnalysis.SyntaxNode,System.Object[])">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo"/> instance with the specified parameters.
            </summary>
            <param name="descriptor">The input <see cref="T:Microsoft.CodeAnalysis.DiagnosticDescriptor"/> for the diagnostics to create.</param>
            <param name="node">The source <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> to attach the diagnostics to.</param>
            <param name="args">The optional arguments for the formatted message to include.</param>
            <returns>A new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo"/> instance with the specified parameters.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo">
            <summary>
            A model describing the hierarchy info for a specific type.
            </summary>
            <param name="FilenameHint">The filename hint for the current type.</param>
            <param name="MetadataName">The metadata name for the current type.</param>
            <param name="Namespace">Gets the namespace for the current type.</param>
            <param name="Hierarchy">Gets the sequence of type definitions containing the current type.</param>
            <inheritdoc/>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.#ctor(System.String,System.String,System.String,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo})">
            <summary>
            A model describing the hierarchy info for a specific type.
            </summary>
            <param name="FilenameHint">The filename hint for the current type.</param>
            <param name="MetadataName">The metadata name for the current type.</param>
            <param name="Namespace">Gets the namespace for the current type.</param>
            <param name="Hierarchy">Gets the sequence of type definitions containing the current type.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.FilenameHint">
            <summary>The filename hint for the current type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.MetadataName">
            <summary>The metadata name for the current type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.Namespace">
            <summary>Gets the namespace for the current type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.Hierarchy">
            <summary>Gets the sequence of type definitions containing the current type.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.From(Microsoft.CodeAnalysis.INamedTypeSymbol)">
            <summary>
            Creates a new <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo"/> instance from a given <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/>.
            </summary>
            <param name="typeSymbol">The input <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> instance to gather info for.</param>
            <returns>A <see cref="T:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo"/> instance describing <paramref name="typeSymbol"/>.</returns>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.HierarchyInfo.GetCompilationUnit(System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax},Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> instance wrapping the given members.
            </summary>
            <param name="memberDeclarations">The input <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.MemberDeclarationSyntax"/> instances to use.</param>
            <param name="baseList">The optional <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.BaseListSyntax"/> instance to add to generated types.</param>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax"/> object wrapping <paramref name="memberDeclarations"/>.</returns>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Models.Result`1">
            <summary>
            A model representing a value and an associated set of diagnostic errors.
            </summary>
            <typeparam name="TValue">The type of the wrapped value.</typeparam>
            <param name="Value">The wrapped value for the current result.</param>
            <param name="Errors">The associated diagnostic errors, if any.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.Result`1.#ctor(`0,CommunityToolkit.Mvvm.SourceGenerators.Helpers.EquatableArray{CommunityToolkit.Mvvm.SourceGenerators.Models.DiagnosticInfo})">
            <summary>
            A model representing a value and an associated set of diagnostic errors.
            </summary>
            <typeparam name="TValue">The type of the wrapped value.</typeparam>
            <param name="Value">The wrapped value for the current result.</param>
            <param name="Errors">The associated diagnostic errors, if any.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.Result`1.Value">
            <summary>The wrapped value for the current result.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.Result`1.Errors">
            <summary>The associated diagnostic errors, if any.</summary>
        </member>
        <member name="T:CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo">
            <summary>
            A model describing a type info in a type hierarchy.
            </summary>
            <param name="QualifiedName">The qualified name for the type.</param>
            <param name="Kind">The type of the type in the hierarchy.</param>
            <param name="IsRecord">Whether the type is a record type.</param>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo.#ctor(System.String,Microsoft.CodeAnalysis.TypeKind,System.Boolean)">
            <summary>
            A model describing a type info in a type hierarchy.
            </summary>
            <param name="QualifiedName">The qualified name for the type.</param>
            <param name="Kind">The type of the type in the hierarchy.</param>
            <param name="IsRecord">Whether the type is a record type.</param>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo.QualifiedName">
            <summary>The qualified name for the type.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo.Kind">
            <summary>The type of the type in the hierarchy.</summary>
        </member>
        <member name="P:CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo.IsRecord">
            <summary>Whether the type is a record type.</summary>
        </member>
        <member name="M:CommunityToolkit.Mvvm.SourceGenerators.Models.TypeInfo.GetSyntax">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> instance for the current info.
            </summary>
            <returns>A <see cref="T:Microsoft.CodeAnalysis.CSharp.Syntax.TypeDeclarationSyntax"/> instance for the current info.</returns>
        </member>
        <member name="T:System.HashCode">
            <summary>
            A polyfill type that mirrors some methods from <see cref="T:System.HashCode"/> on .NET 6.
            </summary>
        </member>
        <member name="M:System.HashCode.GenerateGlobalSeed">
            <summary>
            Initializes the default seed.
            </summary>
            <returns>A random seed.</returns>
        </member>
        <member name="M:System.HashCode.Add``1(``0)">
            <summary>
            Adds a single value to the current hash.
            </summary>
            <typeparam name="T">The type of the value to add into the hash code.</typeparam>
            <param name="value">The value to add into the hash code.</param>
        </member>
        <member name="M:System.HashCode.ToHashCode">
            <summary>
            Gets the resulting hashcode from the current instance.
            </summary>
            <returns>The resulting hashcode from the current instance.</returns>
        </member>
        <member name="M:System.HashCode.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:System.HashCode.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.HashCode.RotateLeft(System.UInt32,System.Int32)">
            <summary>
            Rotates the specified value left by the specified number of bits.
            Similar in behavior to the x86 instruction ROL.
            </summary>
            <param name="value">The value to rotate.</param>
            <param name="offset">The number of bits to rotate by.
            Any value outside the range [0..31] is treated as congruent mod 32.</param>
            <returns>The rotated value.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext">
            <summary>
            A type containing information for a match from <see cref="M:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions.ForAttributeWithMetadataName``1(Microsoft.CodeAnalysis.SyntaxValueProvider,System.String,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken,System.Boolean},System.Func{Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext,System.Threading.CancellationToken,``0})"/>.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.#ctor(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SemanticModel,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.AttributeData})">
            <summary>
            Creates a new <see cref="T:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext"/> instance with the specified parameters.
            </summary>
            <param name="targetNode">The syntax node the attribute is attached to.</param>
            <param name="targetSymbol">The symbol that the attribute is attached to.</param>
            <param name="semanticModel">Semantic model for the file that <see cref="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetNode"/> is contained within.</param>
            <param name="attributes">The collection of matching attributes.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetNode">
            <summary>
            The syntax node the attribute is attached to. For example, with <c>[CLSCompliant] class C { }</c> this would the class declaration node.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetSymbol">
            <summary>
            The symbol that the attribute is attached to. For example, with <c>[CLSCompliant] class C { }</c> this would be the <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> for <c>"C"</c>.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.SemanticModel">
            <summary>
            Semantic model for the file that <see cref="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetNode"/> is contained within.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.Attributes">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.AttributeData"/>s for any matching attributes on <see cref="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetSymbol"/>. Always non-empty. All
            these attributes will have an <see cref="P:Microsoft.CodeAnalysis.AttributeData.AttributeClass"/> whose fully qualified name metadata
            name matches the name requested in <see cref="M:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions.ForAttributeWithMetadataName``1(Microsoft.CodeAnalysis.SyntaxValueProvider,System.String,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken,System.Boolean},System.Func{Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext,System.Threading.CancellationToken,``0})"/>.
            <para>
            To get the entire list of attributes, use <see cref="M:Microsoft.CodeAnalysis.ISymbol.GetAttributes"/> on <see cref="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetSymbol"/>.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.CodeAnalysis.SyntaxValueProvider"/> type.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions.ForAttributeWithMetadataName``1(Microsoft.CodeAnalysis.SyntaxValueProvider,System.String,System.Func{Microsoft.CodeAnalysis.SyntaxNode,System.Threading.CancellationToken,System.Boolean},System.Func{Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext,System.Threading.CancellationToken,``0})">
            <summary>
            Creates an <see cref="T:Microsoft.CodeAnalysis.IncrementalValuesProvider`1"/> that can provide a transform over all <see
            cref="T:Microsoft.CodeAnalysis.SyntaxNode"/>s if that node has an attribute on it that binds to a <see cref="T:Microsoft.CodeAnalysis.INamedTypeSymbol"/> with the
            same fully-qualified metadata as the provided <paramref name="fullyQualifiedMetadataName"/>. <paramref
            name="fullyQualifiedMetadataName"/> should be the fully-qualified, metadata name of the attribute, including the
            <c>Attribute</c> suffix.  For example <c>"System.CLSCompliantAttribute</c> for <see cref="T:System.CLSCompliantAttribute"/>.
            </summary>
            <param name="syntaxValueProvider">The source <see cref="T:Microsoft.CodeAnalysis.SyntaxValueProvider"/> instance to use.</param>
            <param name="fullyQualifiedMetadataName">The fully qualified metadata name of the attribute to look for.</param>
            <param name="predicate">A function that determines if the given <see cref="T:Microsoft.CodeAnalysis.SyntaxNode"/> attribute target (<see
            cref="P:Microsoft.CodeAnalysis.GeneratorAttributeSyntaxContext.TargetNode"/>) should be transformed.  Nodes that do not pass this
            predicate will not have their attributes looked at at all.</param>
            <param name="transform">A function that performs the transform. This will only be passed nodes that return <see
            langword="true"/> for <paramref name="predicate"/> and which have a matching <see cref="T:Microsoft.CodeAnalysis.AttributeData"/> whose
            <see cref="P:Microsoft.CodeAnalysis.AttributeData.AttributeClass"/> has the same fully qualified, metadata name as <paramref
            name="fullyQualifiedMetadataName"/>.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions.Option`1">
            <summary>
            A simple record to wrap a value that might be missing.
            </summary>
            <typeparam name="T">The type of values to wrap</typeparam>
            <param name="Value">The wrapped value, if it exists.</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions.Option`1.#ctor(`0)">
            <summary>
            A simple record to wrap a value that might be missing.
            </summary>
            <typeparam name="T">The type of values to wrap</typeparam>
            <param name="Value">The wrapped value, if it exists.</param>
        </member>
        <member name="P:Microsoft.CodeAnalysis.SyntaxValueProviderExtensions.Option`1.Value">
            <summary>The wrapped value, if it exists.</summary>
        </member>
    </members>
</doc>
